apply plugin: "com.github.johnrengelman.shadow"

archivesBaseName = 'overops-functions'

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}

	dependencies {
		classpath group:'com.github.jengelman.gradle.plugins', name:'shadow', version:'5.2.0'
	}
}

dependencies {
	implementation (
		project(":overops-functions-shared"),
		"com.atlassian.jira:jira-rest-java-client-api:5.2.0",
		"com.atlassian.jira:jira-rest-java-client-core:5.2.0",
		"com.google.guava:guava:32.1.3-jre",
		"io.atlassian.fugue:fugue:4.7.2",
		"com.google.code.gson:gson:2.10.1"
	)
	
	if (gradle.hasProperty("localApiClient") &&
		"$gradle.localApiClient" == "true") {
		println "Compiling overops functions shared with project api-client"

		implementation (
			project(":api-client"),
			project(":api-client-util"),
		)
	} else {
		println "Compiling overops functions shared with maven api-client"

		implementation (
			"com.takipi:api-client:2.30.0",
			"com.takipi:api-client-util:2.30.0",
		)
	}
}

shadowJar {
	classifier = ''
	archiveVersion = ''
	exclude 'META-INF/maven'
	exclude 'META-INF/*.example'
}

jar {
	manifest {
		attributes 'Main-Class': 'OveropsFunctions'
	}
}

// uploadArchives {
// 	repositories {
// 		mavenDeployer {
// 			pom.project {
// 				name 'overops-functions'
// 				description 'OverOps Functions - Extending OverOps Reliability Platform'
				
// 				licenses {
// 					license {
// 						name 'MIT License'
// 						url 'http://www.opensource.org/licenses/mit-license.php'
// 					}
// 				}

// 				scm {
// 					connection 'scm:git:https://github.com/takipi/overops-functions/tree/master/overops-functions'
// 					developerConnection 'scm:git:https://github.com/takipi/overops-functions/tree/master/overops-functions'
// 					url 'https://github.com/takipi/overops-functions/tree/master/overops-functions'
// 				}
// 			}
// 		}
// 	}
// }

task writeDependenciesFile() { 
	doLast {
		def resourcesDir = sourceSets.main.resources.srcDirs[0]
		def dependenciesFile = new File(resourcesDir, "META-INF/dependencies.txt")
		
		dependenciesFile.write(
			project.configurations.runtimeClasspath.resolve()
				.collect({ it.name })
				.join("\n")
		)
	}
}

processResources.dependsOn writeDependenciesFile

task copyJar(dependsOn: shadowJar) {
	doLast {
		if (rootProject.hasProperty("jarTargetFile")) {
			println "Copying $shadowJar.archivePath to $jarTargetFile"
			
			ant.copy(file:shadowJar.archivePath, tofile:jarTargetFile)
		}
	}
}
