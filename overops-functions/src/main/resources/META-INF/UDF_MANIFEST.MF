<?xml version="1.0" encoding="UTF-8"?>
<udf_manifest>
	<version>2.9</version>
	<library_name>overops-public-lib</library_name>
	<backwards_compatible>true</backwards_compatible>
	<functions>
		<function>
			<function_type>CHANNEL</function_type>
			<function_name>apply-label</function_name>
			<description>
				Applies a specific input label to events.
				See code at: https://git.io/fx6sc
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.label.ApplyLabelFunction</class_file>
			<default_params>
				# Label to apply to events
				# label=sample_label_name
			</default_params>
		</function>
		<function>
			<function_type>ANOMALY</function_type>
			<function_name>Relative Threshold</function_name>
			<description>
				Compare the view event volume against an error rate (%) and optional fixed threshold. See code at: https://git.io/fx6sl
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.volume.RelativeThresholdFunction</class_file>
			<default_params>
				# Acceptable error rate (1 to 100)
				rate = 10
				
				# Optional (0 to ignore) fixed min volume threshold
				threshold = 1000
				
				# Name of label to apply to anomalous events
				label = Anomaly
				
				# Min interval for alerts
				min_interval = 2d

				# Max interval to retain anomaly label
				max_interval = 3d
			</default_params>
		</function>
		<function>
			<function_type>ANOMALY</function_type>
			<function_name>Anomaly</function_name>
			<description>
				Alert on events experiencing anomalous volume within a rolling time window. See code at: https://git.io/fpwNI
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.volume.RegressionFunction</class_file>
			<default_params>
				# the active time window (min) to inspect
				activeTimespan = 1440

				# The baseline time window (min) to compare against
				baseTimespan = 10080

				# Change in % that would be considered a regression
				regressionDelta = 100

				# Min rate in % that an event must exceed
				minErrorRateThreshold = 10

				# Min fixed volume that an event must exceed
				minVolumeThreshold = 1000
				
				# Name of label to apply to anomalous events
				label = Anomaly
				
				# Min interval for alerts
				min_interval = 2d

				# Max interval to retain anomaly label
				max_interval = 3d
			</default_params>
			<admin_function>false</admin_function>
		</function>
		<function>
			<function_type>CHANNEL</function_type>
			<function_name>Routing</function_name>
			<description>
				Classify incoming events according to the functional component within the code from which they originated. See code at: https://git.io/fx6s8
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.infra.InfrastructureRoutingFunction</class_file>
			<default_params>
				# Category name where tiers views will be created.
				category_name = tiers
				
				# Category name where app tiers views will be created.
				apps_category_name = Apps

				# Link to the full tiers list: https://git.io/fpPT0 
				# Enhance it with a delimited list: A=B;C=D;E=F, where the first item is a package (e.g com.mongo), and the second is a tier (e.g MongoDB).
				# namespaces = org.company.db=DB; org.mongodb=MongoDB
			</default_params>
			<admin_function>true</admin_function>
		</function>
		<function>
			<function_type>CHANNEL</function_type>
			<function_name>Tier Routing</function_name>
			<description>
				Classify events according to the functional component within the code from which they originated. See code at: https://git.io/fx6s8
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.infra.InfrastructureRoutingFunction</class_file>
			<default_params>
				# Category name where tiers views will be created.
				category_name = tiers

				# Link to the full tiers list: https://git.io/fpPT0 
				# Enhance it with a delimited list: A=B;C=D;E=F, where the first item is a package (e.g com.mongo), and the second is a tier (e.g MongoDB).
				# namespaces = org.company.db=DB; org.mongodb=MongoDB
			</default_params>
			<admin_function>true</admin_function>
		</function>
		<function>
			<function_type>ANOMALY</function_type>
			<function_name>Automatic entry point timers</function_name>
			<description>
				Automatically set timers on application entry points based on average runtime. See code at: https://git.io/fxiy0
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.timer.PeriodicAvgTimerFunction</class_file>
			<default_params>
				# Active time period to look at.
				active_timespan = 1h

				# Required resolution for active period.
				active_timespan_point_res = 100

				# Baseline time period to look at.
				baseline_timespan = 7d

				# Required resolution for baseline period.
				baseline_timespan_point_res = 100

				# Minimum invocations in active period to start analyzing.
				active_invocations_threshold = 100

				# Minimum invocations in baseline period to start analyzing.
				baseline_invocations_threshold = 250

				# Miminum delta (in ms) between baseline and active average times for a transaction to be considered slowing.
				min_delta_threshold = 5

				# Percentage of slow invocations for a transaction to be considered slowing.
				over_avg_slowing_percentage = 0.3

				# Percentage of slow invocations for a transaction to be considered critically slowing.
				over_avg_critical_percentage = 0.6

				# Number of std deviations from the mean time for a transaction to be considered slow.
				std_dev_factor = 1.5

				# Number of std deviations from the mean time to set automatic timer to.
				timer_std_dev_factor = 1.0

				# Should maintain active timer for non-slow transactions.
				timer_always_on = false

				# Should actively place timers on non-slow transactions.
				monitor_ok_transactions = false

				# Minimum value allowed for a given threshold.
				min_timer_threshold = 30
			</default_params>
			<admin_function>true</admin_function>
		</function>
		<function>
			<function_type>ANOMALY</function_type>
			<function_name>App Routing</function_name>
			<description>
				Automatically create views for active applications. See code at: https://git.io/fpiir
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.app.AppRoutingFunction</class_file>
			<default_params>
				# Name of category in which to place views
				category_name = Apps

				# Max num of views to create
				max_views = 50
			</default_params>
			<admin_function>true</admin_function>
		</function>
		<function>
			<function_type>ANOMALY</function_type>
			<function_name>Deployment Routing</function_name>
			<description>
				Automatically create views for active deployments. See code at: https://git.io/fpiia
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.deployment.DeploymentRoutingFunction</class_file>
			<default_params>
				# Name of category in which to place views
				category_name = CI / CD

				# Max num of views to create (views for non active deployments will be removed)
				max_views = 6

				# An optional prefix to add to the view name (e.g. 'New in')
				prefix = 'New in '
			</default_params>
			<admin_function>true</admin_function>
		</function>
		<function>
			<function_type>ANOMALY</function_type>
			<function_name>Severity</function_name>
			<description>
				Mark events as New if they were introduced in an active deployment and are important. Mark events as Regressed if they have crossed a volume threshold against a previous timeframe. See code at: https://git.io/fxiSl
			</description>
			<param_type>TEXT</param_type>
			<class_file>com.takipi.udf.severity.SeverityFunction</class_file>
			<default_params>
				# the time window (min) that we compare the baseline to
				activeTimespan = 1440

				# the time window (min) to compare the last &lt;activeTimespan&gt; against 
				baseTimespan = 10080

				# a change in % that would be considered a regression
				regressionDelta = 1

				# a change in % that would be considered a critical regression (zero means no critical regressions)
				criticalRegressionDelta = 0

				# should the function attempt to apply seasonality algorithm
				applySeasonality = false

				# comma delimited list of exception types that are severe by definition
				criticalExceptionTypes = NullPointerException;IndexOutOfBoundsException;ClassCastException;AssertionError

				# minimum rate that a regression, new + non-critical event must exceed
				minErrorRateThreshold = 0.1

				# minimum volume that a regression, new + non-critical event must exceed
				minVolumeThreshold = 500

				# name of category in which to place views
				category = Severe

				# how to label new issues
				newEventslabel = New Issue

				# view to contain new issues
				newEventsView = New Issues

				# how to label regressed issues
				regressedEventsLabel = Regression

				# view to contain regressed issues
				regressedEventsView = Regressions

				# how long (minutes) should these labels "stick" to an event
				labelRetention = 1440
			</default_params>
			<admin_function>true</admin_function>
		</function>
	</functions>
</udf_manifest>
