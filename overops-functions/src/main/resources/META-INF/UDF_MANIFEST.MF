<?xml version='1.0' encoding='utf-8'?>
<udf_manifest>
   <version>1.0</version> 
   <library_name>overops-public-lib</library_name>
   <backwards_compatible>true</backwards_compatible>
   <functions>
	   <function>
	      <function_type>CHANNEL</function_type>
	      <function_name>apply-label</function_name>
	      <description>
	      	Applies a specific input label to events.
	      	See code at: https://git.io/fALtx
	      </description>
	      <param_type>TEXT</param_type>
	      <class_file>com.takipi.common.udf.label.ApplyLabelFunction</class_file>
	      <default_params>
	      	# Label to apply to events
	      	# label=sample_label_name
	      </default_params>
	   </function>
	   <function>
	      <function_type>CHANNEL</function_type>
	      <function_name>infrastructure-routing</function_name>
	      <description>Classify incoming events according to the functional component within the code from which they originated</description>
	      <param_type>TEXT</param_type>
	      <class_file>com.takipi.common.udf.infra.InfrastructureRoutingFunction</class_file>
	      <default_params>
	      	# A list of comma delimited tuples in the form of A=B;C=D;E=F, where the first item within the tuple is a namespace (package name), and the second is a label which will applied to the event if it matches the namespace. If left empty, uses predefined common libraries namespaces.
	      	# namespaces=com.company.db=db;com.company.util=utility

	      	# Category name where auto-generated routing view will be created.
	      	category_name=infrastructure
	      </default_params>
	   </function>
	   <function>
	      <function_type>ANOMALY</function_type>
	      <function_name>periodic-infrastructure-routing</function_name>
	      <description>Periodically classify incoming events according to the functional component within the code from which they originated</description>
	      <param_type>TEXT</param_type>
	      <class_file>com.takipi.common.udf.infra.PeriodicInfrastructureRoutingFunction</class_file>
	      <default_params>
	      	# A list of comma delimited tuples in the form of A=B;C=D;E=F, where the first item within the tuple is a namespace (package name), and the second is a label which will applied to the event if it matches the namespace. If left empty, uses predefined common libraries namespaces.
	      	# namespaces=com.company.db=db;com.company.util=utility

	      	# Category name where auto-generated routing view will be created.
	      	category_name=infrastructure

	      	# Time period to look at, in hours.
	      	timespan = 24
	      </default_params>
	   </function>
	   <function>
	      <function_type>ANOMALY</function_type>
	      <function_name>Relative Threshold</function_name>
	      <description>
	      	Compare the event volume within the view against a target threshold and rate. The rate is defined as number of events / throughput. Throughput can set as the number of times the method containing the event was called, or the number of times the application thread calling into the event executed. See code at: https://git.io/fALtZ
	      </description>
	      <param_type>TEXT</param_type>
	      <class_file>com.takipi.common.udf.volume.RelativeThresholdFunction</class_file>
	      <default_params>
	      	# A percentage value between 1 and 100 against which the volume of events / throughput is compared.
	      	rate = 5

	      	# Defines a minimal volume threshold that if exceeded to constitute an anomaly in addition to the relative rate.
	      	threshold = 100

	      	# Compare the number of times application threads (e.g. Servlet, Actor, Future,..) containing the events matching the target views have executed  against the number of events occurring. For example, if a Servlet containing the events within the view was invoked a 1000 times and 20 events matching the viewâ€™s filter took place, a RATE value above 2 will invoke an alert.
	      	relative_to = Thread_Calls

	      	# Compare the number of times the application method containing the events was invoked against the number of events which occurred.
	      	# relative_to = Method_Calls

	      	# Time period to look at, in minutes.
	      	timespan = 60
	      </default_params>
	   </function>
	</functions>
</udf_manifest>
